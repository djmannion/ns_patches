#! /usr/bin/env python2

"""Runs a pre-processing step for a subject in the ns_patches fMRI experiment"""

import argparse
import logging
import sys

import ns_patches.config, ns_patches.paths
import ns_patches.analysis.loc_analysis


def main():
    """Execution function"""

    desc = """Runs a pre-processing step for a subject in the ns_patches fMRI experiment"""

    # use this formatter so we can supply our own indentation
    fmt = argparse.RawDescriptionHelpFormatter

    parser = argparse.ArgumentParser( description = desc,
                                      formatter_class = fmt,
                                    )

    parser.add_argument( "subj_id",
                         help = "Subject identifier"
                       )

    proc_steps = ( "glm",
                   "patch_id",
                   "patch_cluster",
                   "patch_count"
                 )

    parser.add_argument( "proc_step",
                         choices = proc_steps,
                         help = "Processing step"
                       )

    args = parser.parse_args()

    # load the experiment / subject info
    conf = ns_patches.config.get_conf( args.subj_id )
    paths = ns_patches.paths.get_subj_paths( conf )

    logger = logging.getLogger()
    logger.setLevel( logging.INFO )

    log_fmt = logging.Formatter( "%(name)s, %(asctime)s, (%(levelname)s)\n-----\n%(message)s\n" )

    file_log = logging.FileHandler( paths.log.full() )
    file_log.setFormatter( log_fmt )

    logger.addHandler( file_log )

    scr_log = logging.StreamHandler( sys.stdout )
    scr_log.setLevel( logging.INFO )
    scr_log.setFormatter( log_fmt )

    logger.addHandler( scr_log )

    if args.proc_step == "glm":
        ns_patches.analysis.loc_analysis.glm( conf, paths )

    elif args.proc_step == "patch_id":
        ns_patches.analysis.loc_analysis.patch_id( conf, paths )

    elif args.proc_step == "patch_cluster":
        ns_patches.analysis.loc_analysis.patch_cluster( conf, paths )

    elif args.proc_step == "patch_count":
        ns_patches.analysis.loc_analysis.patch_count( conf, paths )

    else:
        print "Not implemented"


if __name__ == "__main__":
    main()
