#! /usr/bin/env python2

"""Runs a pre-processing step for a subject in the ns_patches fMRI experiment"""

import argparse
import logging
import sys

import ns_patches.config, ns_patches.paths
import ns_patches.analysis.preproc


def main():
    """Execution function"""

    desc = """Runs a pre-processing step for a subject in the ns_patches fMRI experiment"""

    # use this formatter so we can supply our own indentation
    fmt = argparse.RawDescriptionHelpFormatter

    parser = argparse.ArgumentParser( description = desc,
                                      formatter_class = fmt,
                                    )

    parser.add_argument( "subj_id",
                         help = "Subject identifier"
                       )

    preproc_steps = ( "convert",
                      "st_correct",
                      "fieldmap",
                      "mc_unwarp",
                      "sess_reg",
                      "vol_to_surf"
                    )

    parser.add_argument( "preproc_step",
                         choices = preproc_steps,
                         help = "Preprocessing step"
                       )

    args = parser.parse_args()

    # load the experiment / subject info
    conf = ns_patches.config.get_conf( args.subj_id )
    paths = ns_patches.paths.get_subj_paths( conf )

    logger = logging.getLogger()
    logger.setLevel( logging.INFO )

    log_fmt = logging.Formatter( "%(name)s, %(asctime)s, (%(levelname)s)\n-----\n%(message)s\n" )

    file_log = logging.FileHandler( paths.log.full() )
    file_log.setFormatter( log_fmt )

    logger.addHandler( file_log )

    scr_log = logging.StreamHandler( sys.stdout )
    scr_log.setLevel( logging.INFO )
    scr_log.setFormatter( log_fmt )

    logger.addHandler( scr_log )

    if args.preproc_step == "convert":
        ns_patches.analysis.preproc.convert( paths )

    elif args.preproc_step == "st_correct":
        ns_patches.analysis.preproc.st_correct( conf, paths )

    elif args.preproc_step == "mc_unwarp":
        ns_patches.analysis.preproc.mc_unwarp( conf, paths )

    elif args.preproc_step == "fieldmap":
        ns_patches.analysis.preproc.fieldmaps( conf, paths )

    elif args.preproc_step == "sess_reg":
        ns_patches.analysis.preproc.sess_reg( conf, paths )

    elif args.preproc_step == "vol_to_surf":
        ns_patches.analysis.preproc.vol_to_surf( conf, paths )

    else:
        print "Not implemented"


if __name__ == "__main__":
    main()
